generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())

  images    Image[]
  accounts  Account[]
  sessions  Session[]
  likes     Like[]
  saves     Save[]
  following Follow[]  @relation("UserFollowing")
  followers Follow[]  @relation("UserFollowers")

  @@map("users")
}

model Image {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String   @map("image_url")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")
  likes  Like[]
  saves  Save[]

  @@map("images")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @map("image_id")

  @@unique([userId, imageId]) // ensures a user can like an image only once.
  @@map("likes")
}

model Save {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @map("image_id")

  @@unique([userId, imageId]) // ensures a user can save an image only once.
  @@map("saves")
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // the user who is following another user
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String @map("follower_id")

  // the user being followed
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @map("following_id")

  @@unique([followerId, followingId]) // ensures a user can follow another user only once
  @@map("follows")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
